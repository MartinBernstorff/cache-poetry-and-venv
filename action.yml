name: 'Cache poetry and venv'
description: 'Cache poetry and venv'
inputs:
  poetry-version:
    description: "Version of poetry, used for cache hash."
    required: true
    default: '0.0.0'
  cache-version:
    description: "Cache version, used for cache key. If you change this, automatically invalidates the cache."
    required: true
    default: '0.0.0'
outputs:
  venv-cache-hit:
    description: "Whether there was a cache hit on .venv"
    value: ${{ steps.cached-poetry-dependencies.outputs.cache-hit }}
  poetry-cache-hit:
    description: "Whether there was a cache hit on the poetry installation"
    value: (${{ steps.cached-poetry-unix.outputs.cache-hit }} || ${{ steps.cached-poetry-windows.outputs.cache-hit }}) 


runs:
  using: "composite"
  steps:
    # Override version numbers to avoid invalidating cache on version bump
    - name: Linux, Overwrite version number from pyproject.toml, so it doesn't invalidate cache.
      id: remove-version-from-toml-macos
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        ls
        sed -i "s/version = \".*\"/version = \"0.0.0\"/g" pyproject.toml
        cat pyproject.toml

    - name: Mac, Overwrite version number from pyproject.toml, so it doesn't invalidate cache.
      id: remove-version-from-toml-ubuntu
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        sed -i '' "s/version = \".*\"/version = \"0.0.0\"/g" pyproject.toml
        cat pyproject.toml
    
    - name: Windows, Overwrite version number from pyproject.toml, so it doesn't invalidate cache.
      id: remove-version-from-toml-windows
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        (Get-Content -path "pyproject.toml" | % { $_ -Replace '^version = .+', 'version = "0.0.0"' }) | Set-Content "pyproject.toml"
        Get-Content -path "pyproject.toml"

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2.1.6
      with:
        path: |
          .venv
        # Cache the complete venv dir for a given os, python version, pyproject.toml
        key: ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-${{ inputs.poetry_version }}-toml-${{ hashFiles('pyproject.toml') }}-$cache-{{ inputs.cache-version }}

    - name: Mac, Linux, Load cached .local (Poetry install location)
      id: cached-poetry-unix
      if: (matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest')
      uses: actions/cache@v2.1.6
      with:
        path: |
          ~/.local/
        # Cache the complete venv dir for a given os, python version, pyproject.toml
        key: ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-${{ inputs.poetry_version }}-toml-${{ hashFiles('pyproject.toml') }}-$cache-{{ inputs.cache-version }}

    - name: Windows, Load cached Poetry install (Poetry install location)
      id: cached-poetry-windows
      if: matrix.os == 'windows-latest'
      uses: actions/cache@v2.1.6
      with:
        path: |
          %APPDATA%\pypoetry
        # Cache the complete venv dir for a given os, python version, pyproject.toml
        key: ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-${{ inputs.poetry_version }}-toml-${{ hashFiles('pyproject.toml') }}-cache-${{ inputs.cache-version }}